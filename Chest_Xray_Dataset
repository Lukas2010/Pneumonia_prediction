{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6b9f4691",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:00:36.759091Z",
     "iopub.status.busy": "2025-07-24T17:00:36.758830Z",
     "iopub.status.idle": "2025-07-24T17:00:36.762470Z",
     "shell.execute_reply": "2025-07-24T17:00:36.761945Z"
    },
    "papermill": {
     "duration": 0.011689,
     "end_time": "2025-07-24T17:00:36.763645",
     "exception": false,
     "start_time": "2025-07-24T17:00:36.751956",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#!pip install -q -U tensorflow==2.19.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3c40a250",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-24T17:00:36.775088Z",
     "iopub.status.busy": "2025-07-24T17:00:36.774896Z",
     "iopub.status.idle": "2025-07-24T17:00:52.618821Z",
     "shell.execute_reply": "2025-07-24T17:00:52.617824Z"
    },
    "papermill": {
     "duration": 15.851016,
     "end_time": "2025-07-24T17:00:52.620025",
     "exception": false,
     "start_time": "2025-07-24T17:00:36.769009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-24 17:00:39.965871: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753376440.184186      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753376440.249309      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of replicas: 1\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "from keras import layers, ops\n",
    "\n",
    "try:\n",
    "    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n",
    "    print('Device:', tpu.master())\n",
    "    tf.config.experimental_connect_to_cluster(tpu)\n",
    "    tf.tpu.experimental.initialize_tpu_system(tpu)\n",
    "    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n",
    "except:\n",
    "    strategy = tf.distribute.get_strategy()\n",
    "print('Number of replicas:', strategy.num_replicas_in_sync)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c18916f",
   "metadata": {
    "papermill": {
     "duration": 0.004961,
     "end_time": "2025-07-24T17:00:52.630508",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.625547",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Locate and import the data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbf5c163",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:48:19.557618Z",
     "iopub.status.busy": "2025-07-24T11:48:19.557187Z",
     "iopub.status.idle": "2025-07-24T11:48:19.562152Z",
     "shell.execute_reply": "2025-07-24T11:48:19.561421Z",
     "shell.execute_reply.started": "2025-07-24T11:48:19.557599Z"
    },
    "papermill": {
     "duration": 0.004801,
     "end_time": "2025-07-24T17:00:52.641078",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.636277",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(\"The working directory is: \", os.getcwd())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc789738",
   "metadata": {
    "papermill": {
     "duration": 0.004781,
     "end_time": "2025-07-24T17:00:52.650829",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.646048",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**The files are located in the following directory**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65d70cb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:48:19.563082Z",
     "iopub.status.busy": "2025-07-24T11:48:19.562858Z",
     "iopub.status.idle": "2025-07-24T11:48:19.578582Z",
     "shell.execute_reply": "2025-07-24T11:48:19.577757Z",
     "shell.execute_reply.started": "2025-07-24T11:48:19.563062Z"
    },
    "papermill": {
     "duration": 0.00478,
     "end_time": "2025-07-24T17:00:52.660611",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.655831",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "data_dir = \"/kaggle/input/chest-xray-pneumonia/chest_xray\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "576fd643",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:48:19.580945Z",
     "iopub.status.busy": "2025-07-24T11:48:19.580740Z",
     "iopub.status.idle": "2025-07-24T11:48:19.610078Z",
     "shell.execute_reply": "2025-07-24T11:48:19.609410Z",
     "shell.execute_reply.started": "2025-07-24T11:48:19.580929Z"
    },
    "papermill": {
     "duration": 0.004754,
     "end_time": "2025-07-24T17:00:52.670291",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.665537",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "os.listdir(data_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f251e01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:48:19.611013Z",
     "iopub.status.busy": "2025-07-24T11:48:19.610771Z",
     "iopub.status.idle": "2025-07-24T11:48:19.616706Z",
     "shell.execute_reply": "2025-07-24T11:48:19.615875Z",
     "shell.execute_reply.started": "2025-07-24T11:48:19.610988Z"
    },
    "papermill": {
     "duration": 0.004738,
     "end_time": "2025-07-24T17:00:52.679849",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.675111",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "train,test, val = int(), int(), int()\n",
    "data = {\"train\":train,\n",
    "        \"test\":test,\n",
    "        \"val\": val\n",
    "    \n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9f2fc1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:48:19.617662Z",
     "iopub.status.busy": "2025-07-24T11:48:19.617392Z",
     "iopub.status.idle": "2025-07-24T11:48:27.644420Z",
     "shell.execute_reply": "2025-07-24T11:48:27.643773Z",
     "shell.execute_reply.started": "2025-07-24T11:48:19.617632Z"
    },
    "papermill": {
     "duration": 0.004749,
     "end_time": "2025-07-24T17:00:52.689445",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.684696",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "batch_size = 32\n",
    "for ttv in data.keys():\n",
    "    directory = data_dir + \"/\" + ttv\n",
    "    extracted = keras.utils.image_dataset_from_directory(directory = data_dir + \"/\" + ttv, \n",
    "                                                labels=\"inferred\",\n",
    "                                                label_mode=\"binary\",\n",
    "                                                class_names=[\"NORMAL\", \"PNEUMONIA\"],\n",
    "                                                color_mode=\"grayscale\",\n",
    "                                                image_size=(500, 500),\n",
    "                                                batch_size = batch_size)\n",
    "    data.update({ttv:extracted})\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5750c8d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:48:27.645453Z",
     "iopub.status.busy": "2025-07-24T11:48:27.645219Z",
     "iopub.status.idle": "2025-07-24T11:48:27.679197Z",
     "shell.execute_reply": "2025-07-24T11:48:27.678319Z",
     "shell.execute_reply.started": "2025-07-24T11:48:27.645432Z"
    },
    "papermill": {
     "duration": 0.004733,
     "end_time": "2025-07-24T17:00:52.699004",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.694271",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(\"Unbatching the files\")\n",
    "train = data.get(\"train\").unbatch()\n",
    "test = data.get(\"test\").unbatch()\n",
    "val = data.get(\"val\").unbatch()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "266336c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:48:27.680298Z",
     "iopub.status.busy": "2025-07-24T11:48:27.680047Z",
     "iopub.status.idle": "2025-07-24T11:48:28.051772Z",
     "shell.execute_reply": "2025-07-24T11:48:28.050893Z",
     "shell.execute_reply.started": "2025-07-24T11:48:27.680278Z"
    },
    "papermill": {
     "duration": 0.004727,
     "end_time": "2025-07-24T17:00:52.708556",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.703829",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "for i in enumerate(train.take(3)):\n",
    "    arry = i[1][0].numpy()\n",
    "    print(\"Min: \", np.min(arry))\n",
    "    print(\"Max: \", np.max(arry))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d20d858c",
   "metadata": {
    "papermill": {
     "duration": 0.00475,
     "end_time": "2025-07-24T17:00:52.718131",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.713381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The pixels of the images seem to be in a spectrum between 0 and 255. Therefore we will apply uniformisation. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83827ae5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:48:28.053173Z",
     "iopub.status.busy": "2025-07-24T11:48:28.052835Z",
     "iopub.status.idle": "2025-07-24T11:49:06.474574Z",
     "shell.execute_reply": "2025-07-24T11:49:06.473777Z",
     "shell.execute_reply.started": "2025-07-24T11:48:28.053137Z"
    },
    "papermill": {
     "duration": 0.004841,
     "end_time": "2025-07-24T17:00:52.727917",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.723076",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(\"Creating normalized train dataset... \")\n",
    "X_train = np.asarray(list(train.map(lambda x,y: (x / 127.5) - 1))) #\n",
    "y_train = np.asarray(list(train.map(lambda x,y: y)))\n",
    "\n",
    "print(\"Creating normalized test dataset... \")\n",
    "X_test = np.asarray(list(test.map(lambda x,y: (x / 127.5) - 1)))\n",
    "y_test = np.asarray(list(test.map(lambda x,y: y)))\n",
    "\n",
    "print(\"Creating normalized validation dataset... \")\n",
    "X_val = np.asarray(list(val.map(lambda x,y: (x / 127.5) - 1)))\n",
    "y_val = np.asarray(list(val.map(lambda x,y: y)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "debcfdc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:49:06.475862Z",
     "iopub.status.busy": "2025-07-24T11:49:06.475607Z",
     "iopub.status.idle": "2025-07-24T11:49:06.480273Z",
     "shell.execute_reply": "2025-07-24T11:49:06.479543Z",
     "shell.execute_reply.started": "2025-07-24T11:49:06.475843Z"
    },
    "papermill": {
     "duration": 0.004738,
     "end_time": "2025-07-24T17:00:52.737486",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.732748",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(y_train.shape)\n",
    "print(X_train.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7144fe62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T07:43:44.895152Z",
     "iopub.status.busy": "2025-07-24T07:43:44.894402Z",
     "iopub.status.idle": "2025-07-24T07:43:45.046295Z",
     "shell.execute_reply": "2025-07-24T07:43:45.045648Z",
     "shell.execute_reply.started": "2025-07-24T07:43:44.895127Z"
    },
    "papermill": {
     "duration": 0.004744,
     "end_time": "2025-07-24T17:00:52.747067",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.742323",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, y_train, X_test, y_test = train_test_split(X_train, y_train.reshape(-1).tolist(), test_size=0.2, random_state=4790)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06659a73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:49:06.481334Z",
     "iopub.status.busy": "2025-07-24T11:49:06.481063Z",
     "iopub.status.idle": "2025-07-24T11:49:06.494719Z",
     "shell.execute_reply": "2025-07-24T11:49:06.494077Z",
     "shell.execute_reply.started": "2025-07-24T11:49:06.481309Z"
    },
    "papermill": {
     "duration": 0.004869,
     "end_time": "2025-07-24T17:00:52.756779",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.751910",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#arry = np.select(y_train==0, y_train)\n",
    "#print(len(np.where(y_train >0)))\n",
    "print(\"Number of pictures with pneumonia: \", len(np.where(y_train >0)[1]))\n",
    "print(\"Number of pictures without pneumonia: \",len(np.where(y_train == 0)[1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a631666",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:49:06.495660Z",
     "iopub.status.busy": "2025-07-24T11:49:06.495424Z",
     "iopub.status.idle": "2025-07-24T11:49:08.434078Z",
     "shell.execute_reply": "2025-07-24T11:49:08.433251Z",
     "shell.execute_reply.started": "2025-07-24T11:49:06.495638Z"
    },
    "papermill": {
     "duration": 0.004924,
     "end_time": "2025-07-24T17:00:52.766531",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.761607",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(\"Lets have a look at the first entry in our training data: \", X_train[1])\n",
    "\n",
    "print(\"\")\n",
    "\n",
    "print(\"The minimum value in the data is: \", np.min(X_train), \"and the maximum value is: \",  np.max(X_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70d1a3a1",
   "metadata": {
    "papermill": {
     "duration": 0.004965,
     "end_time": "2025-07-24T17:00:52.776663",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.771698",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data visualisation\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "129ecb72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:49:08.437013Z",
     "iopub.status.busy": "2025-07-24T11:49:08.436780Z",
     "iopub.status.idle": "2025-07-24T11:49:08.719058Z",
     "shell.execute_reply": "2025-07-24T11:49:08.718254Z",
     "shell.execute_reply.started": "2025-07-24T11:49:08.436997Z"
    },
    "papermill": {
     "duration": 0.004816,
     "end_time": "2025-07-24T17:00:52.786321",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.781505",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "plt.imshow(X_train[0],cmap = \"gray\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6b8dbbd",
   "metadata": {
    "execution": {
     "execution_failed": "2025-07-24T15:45:49.908Z",
     "iopub.execute_input": "2025-07-24T11:49:08.720208Z",
     "iopub.status.busy": "2025-07-24T11:49:08.719898Z"
    },
    "papermill": {
     "duration": 0.005226,
     "end_time": "2025-07-24T17:00:52.796389",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.791163",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "_, ax = plt.subplots(2, 2, figsize=(16, 16))\n",
    "\n",
    "for i in range(0,2):\n",
    "    ax[i,0].imshow(X_train[i+2],cmap = \"gray\")\n",
    "    ax[i, 0].set_title(np.where(y_train[i+2] == 0, \"Normal\", \"Pneumonia\")) #\n",
    "    ax[i, 0].axis(\"off\")\n",
    "    \n",
    "    ax[i,1].imshow(X_train[i+1],cmap = \"gray\")\n",
    "    ax[i, 1].set_title(np.where(y_train[i+1] == 0, \"Normal\", \"Pneumonia\"))\n",
    "    ax[i, 1].axis(\"off\")\n",
    "\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68a3bde7",
   "metadata": {
    "execution": {
     "execution_failed": "2025-07-24T15:45:49.914Z"
    },
    "papermill": {
     "duration": 0.004865,
     "end_time": "2025-07-24T17:00:52.806149",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.801284",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(X_train.shape)\n",
    "print(y_train.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49b0e491",
   "metadata": {
    "papermill": {
     "duration": 0.004837,
     "end_time": "2025-07-24T17:00:52.815813",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.810976",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data augmentation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f113adc3",
   "metadata": {
    "papermill": {
     "duration": 0.004746,
     "end_time": "2025-07-24T17:00:52.825394",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.820648",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(\"START\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d00a5f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:49:11.411683Z",
     "iopub.status.busy": "2025-07-24T11:49:11.411416Z",
     "iopub.status.idle": "2025-07-24T11:49:11.415928Z",
     "shell.execute_reply": "2025-07-24T11:49:11.415264Z",
     "shell.execute_reply.started": "2025-07-24T11:49:11.411658Z"
    },
    "papermill": {
     "duration": 0.004802,
     "end_time": "2025-07-24T17:00:52.835020",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.830218",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "print(type(X_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b228da5d",
   "metadata": {
    "execution": {
     "execution_failed": "2025-07-23T19:11:44.960Z"
    },
    "papermill": {
     "duration": 0.004845,
     "end_time": "2025-07-24T17:00:52.844907",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.840062",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "i = 0\n",
    "for img in X_train:\n",
    "    if i%3 == 0:\n",
    "        img = np.rot90(img)\n",
    "    elif i%7 == 0:\n",
    "        img = np.flipud(img)\n",
    "    X_train[i] = img\n",
    "    i+=1\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4e812e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:49:11.417533Z",
     "iopub.status.busy": "2025-07-24T11:49:11.416791Z",
     "iopub.status.idle": "2025-07-24T11:49:11.622831Z",
     "shell.execute_reply": "2025-07-24T11:49:11.621831Z",
     "shell.execute_reply.started": "2025-07-24T11:49:11.417509Z"
    },
    "papermill": {
     "duration": 0.046983,
     "end_time": "2025-07-24T17:00:52.896740",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.849757",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "plt.imshow(X_train[4],cmap = \"gray\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "18eec3f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:00:52.916142Z",
     "iopub.status.busy": "2025-07-24T17:00:52.915356Z",
     "iopub.status.idle": "2025-07-24T17:00:52.980366Z",
     "shell.execute_reply": "2025-07-24T17:00:52.979591Z"
    },
    "papermill": {
     "duration": 0.073257,
     "end_time": "2025-07-24T17:00:52.981562",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.908305",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "train_datagen = ImageDataGenerator(\n",
    "        rescale = 1./255,\n",
    "        #rotation_range = 30, \n",
    "        zoom_range = 0.1, \n",
    "        width_shift_range=0.1, \n",
    "        height_shift_range=0.1,  \n",
    "        #horizontal_flip = True,  \n",
    "        vertical_flip=False)  \n",
    "\n",
    "test_val_datagen = ImageDataGenerator(\n",
    "        rescale = 1./255\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ff4dd2de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:00:52.993387Z",
     "iopub.status.busy": "2025-07-24T17:00:52.993126Z",
     "iopub.status.idle": "2025-07-24T17:00:55.608816Z",
     "shell.execute_reply": "2025-07-24T17:00:55.608277Z"
    },
    "papermill": {
     "duration": 2.622669,
     "end_time": "2025-07-24T17:00:55.609984",
     "exception": false,
     "start_time": "2025-07-24T17:00:52.987315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 5216 images belonging to 2 classes.\n",
      "Found 624 images belonging to 2 classes.\n",
      "Found 16 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "train_generator = train_datagen.flow_from_directory(\n",
    "    directory=\"/kaggle/input/chest-xray-pneumonia/chest_xray/\" + \"train/\",\n",
    "    target_size=(250, 250),\n",
    "    color_mode=\"grayscale\",\n",
    "    batch_size=32,\n",
    "    class_mode=\"binary\",\n",
    "    shuffle=True,\n",
    "    seed=4790\n",
    ")\n",
    "\n",
    "test_generator = test_val_datagen.flow_from_directory(\n",
    "    directory=\"/kaggle/input/chest-xray-pneumonia/chest_xray/\" + \"test\",\n",
    "    target_size=(250, 250),\n",
    "    color_mode=\"grayscale\",\n",
    "    batch_size=32,\n",
    "    class_mode=\"binary\",\n",
    "    shuffle=True,\n",
    "    seed=4790\n",
    ")\n",
    "\n",
    "valid_generator = test_val_datagen.flow_from_directory(\n",
    "    directory=\"/kaggle/input/chest-xray-pneumonia/chest_xray/\" + \"val\",\n",
    "    target_size=(250, 250),\n",
    "    color_mode=\"grayscale\",\n",
    "    batch_size=32,\n",
    "    class_mode=\"binary\",\n",
    "    shuffle=True,\n",
    "    seed=4790\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bde7293a",
   "metadata": {
    "papermill": {
     "duration": 0.005138,
     "end_time": "2025-07-24T17:00:55.620863",
     "exception": false,
     "start_time": "2025-07-24T17:00:55.615725",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2afa5381",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:00:55.632142Z",
     "iopub.status.busy": "2025-07-24T17:00:55.631902Z",
     "iopub.status.idle": "2025-07-24T17:00:55.636520Z",
     "shell.execute_reply": "2025-07-24T17:00:55.635974Z"
    },
    "papermill": {
     "duration": 0.011356,
     "end_time": "2025-07-24T17:00:55.637514",
     "exception": false,
     "start_time": "2025-07-24T17:00:55.626158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout , BatchNormalization, AveragePooling2D,SeparableConv2D\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "99b3ca8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:00:55.648615Z",
     "iopub.status.busy": "2025-07-24T17:00:55.648404Z",
     "iopub.status.idle": "2025-07-24T17:00:58.059535Z",
     "shell.execute_reply": "2025-07-24T17:00:58.058877Z"
    },
    "papermill": {
     "duration": 2.418206,
     "end_time": "2025-07-24T17:00:58.060895",
     "exception": false,
     "start_time": "2025-07-24T17:00:55.642689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
      "I0000 00:00:1753376456.688739      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1753376456.689402      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(filters = 8, kernel_size=3,strides = 2, padding = \"valid\", activation = \"relu\", #\n",
    "                 input_shape= (250,250,1)))\n",
    "model.add(Conv2D(filters = 8, kernel_size=3,strides = 2, padding = \"valid\", activation = \"relu\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(MaxPool2D(pool_size = 2 , strides = 2 , padding = 'valid'))\n",
    "model.add(Conv2D(filters = 16, kernel_size=3,strides = 2, padding = \"valid\", activation = \"relu\"))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(MaxPool2D(pool_size = 2 , strides = 2 , padding = 'valid'))\n",
    "#model.add(Conv2D(filters = 128, kernel_size=3,strides = 2, padding = \"valid\", activation = \"relu\"))\n",
    "#model.add(MaxPool2D(pool_size = 2 , strides = 2 , padding = 'valid'))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(units = 4 , activation = 'relu'))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(units = 1 , activation = 'sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3269f1f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:00:58.075578Z",
     "iopub.status.busy": "2025-07-24T17:00:58.074843Z",
     "iopub.status.idle": "2025-07-24T17:00:58.093455Z",
     "shell.execute_reply": "2025-07-24T17:00:58.092666Z"
    },
    "papermill": {
     "duration": 0.026824,
     "end_time": "2025-07-24T17:00:58.094567",
     "exception": false,
     "start_time": "2025-07-24T17:00:58.067743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">124</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">124</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)    │            <span style=\"color: #00af00; text-decoration-color: #00af00\">80</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">61</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">61</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)      │           <span style=\"color: #00af00; text-decoration-color: #00af00\">584</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">61</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">61</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,168</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">784</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)              │         <span style=\"color: #00af00; text-decoration-color: #00af00\">3,140</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m124\u001b[0m, \u001b[38;5;34m124\u001b[0m, \u001b[38;5;34m8\u001b[0m)    │            \u001b[38;5;34m80\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m61\u001b[0m, \u001b[38;5;34m61\u001b[0m, \u001b[38;5;34m8\u001b[0m)      │           \u001b[38;5;34m584\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m61\u001b[0m, \u001b[38;5;34m61\u001b[0m, \u001b[38;5;34m8\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m8\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │         \u001b[38;5;34m1,168\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m16\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m784\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)              │         \u001b[38;5;34m3,140\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)              │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m5\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,977</span> (19.44 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m4,977\u001b[0m (19.44 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,977</span> (19.44 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m4,977\u001b[0m (19.44 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8019554",
   "metadata": {
    "papermill": {
     "duration": 0.005987,
     "end_time": "2025-07-24T17:00:58.106760",
     "exception": false,
     "start_time": "2025-07-24T17:00:58.100773",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Customise the Adam optimizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5d8223f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:00:58.119490Z",
     "iopub.status.busy": "2025-07-24T17:00:58.119261Z",
     "iopub.status.idle": "2025-07-24T17:00:58.129187Z",
     "shell.execute_reply": "2025-07-24T17:00:58.128478Z"
    },
    "papermill": {
     "duration": 0.017498,
     "end_time": "2025-07-24T17:00:58.130242",
     "exception": false,
     "start_time": "2025-07-24T17:00:58.112744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from keras.optimizers import Adam\n",
    "\n",
    "optimizer = Adam(\n",
    "    learning_rate = 0.0001\n",
    "    #use_ema = True,\n",
    "    #ema_momentum=0.99\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f489b74",
   "metadata": {
    "papermill": {
     "duration": 0.011135,
     "end_time": "2025-07-24T17:00:58.152718",
     "exception": false,
     "start_time": "2025-07-24T17:00:58.141583",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Create a learning rate scheduler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f1e69798",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:00:58.175746Z",
     "iopub.status.busy": "2025-07-24T17:00:58.175524Z",
     "iopub.status.idle": "2025-07-24T17:00:58.180208Z",
     "shell.execute_reply": "2025-07-24T17:00:58.179702Z"
    },
    "papermill": {
     "duration": 0.012582,
     "end_time": "2025-07-24T17:00:58.181205",
     "exception": false,
     "start_time": "2025-07-24T17:00:58.168623",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from keras.callbacks import LearningRateScheduler\n",
    "\n",
    "def scheduler(epoch, lr):\n",
    "    if epoch < 10:\n",
    "        return lr\n",
    "    else:\n",
    "        print(round(model.optimizer.learning_rate, 5))\n",
    "        return float(lr * ops.exp(-0.1))\n",
    "        \n",
    "\n",
    "#callback = keras.callbacks.LearningRateScheduler(scheduler)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "958c6834",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:00:58.193745Z",
     "iopub.status.busy": "2025-07-24T17:00:58.193546Z",
     "iopub.status.idle": "2025-07-24T17:00:58.196865Z",
     "shell.execute_reply": "2025-07-24T17:00:58.196389Z"
    },
    "papermill": {
     "duration": 0.010737,
     "end_time": "2025-07-24T17:00:58.197837",
     "exception": false,
     "start_time": "2025-07-24T17:00:58.187100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "callbacks = [\n",
    "    keras.callbacks.EarlyStopping(\n",
    "    #    # Stop training when `val_loss` is no longer improving\n",
    "        monitor=\"val_loss\",\n",
    "        # \"no longer improving\" being defined as \"no better than 1e-2 less\"\n",
    "        min_delta=1e-2,\n",
    "        # \"no longer improving\" being further defined as \"for at least 2 epochs\"\n",
    "        patience=2,\n",
    "        verbose=1,\n",
    "    ),\n",
    "    keras.callbacks.LearningRateScheduler(scheduler)\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ac6733bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:00:58.210435Z",
     "iopub.status.busy": "2025-07-24T17:00:58.210033Z",
     "iopub.status.idle": "2025-07-24T17:00:58.216944Z",
     "shell.execute_reply": "2025-07-24T17:00:58.216448Z"
    },
    "papermill": {
     "duration": 0.014191,
     "end_time": "2025-07-24T17:00:58.217984",
     "exception": false,
     "start_time": "2025-07-24T17:00:58.203793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.compile(optimizer = optimizer , loss = 'binary_crossentropy' , metrics = ['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "26c79b10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:00:58.230244Z",
     "iopub.status.busy": "2025-07-24T17:00:58.230007Z",
     "iopub.status.idle": "2025-07-24T17:10:22.018768Z",
     "shell.execute_reply": "2025-07-24T17:10:22.018176Z"
    },
    "papermill": {
     "duration": 563.79612,
     "end_time": "2025-07-24T17:10:22.019889",
     "exception": false,
     "start_time": "2025-07-24T17:00:58.223769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
      "  self._warn_if_super_not_called()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753376462.405948      81 service.cc:148] XLA service 0x7bb650046010 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1753376462.407044      81 service.cc:156]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1753376462.407066      81 service.cc:156]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1753376462.777763      81 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m  1/163\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m19:07\u001b[0m 7s/step - accuracy: 0.6562 - loss: 1.2392"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753376466.306609      81 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 472ms/step - accuracy: 0.4582 - loss: 1.0591 - val_accuracy: 0.4631 - val_loss: 0.6907 - learning_rate: 1.0000e-04\n",
      "Epoch 2/10\n",
      "\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m54s\u001b[0m 328ms/step - accuracy: 0.3599 - loss: 1.0311 - val_accuracy: 0.4968 - val_loss: 0.6855 - learning_rate: 1.0000e-04\n",
      "Epoch 3/10\n",
      "\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m53s\u001b[0m 325ms/step - accuracy: 0.4388 - loss: 1.0170 - val_accuracy: 0.6603 - val_loss: 0.6675 - learning_rate: 1.0000e-04\n",
      "Epoch 4/10\n",
      "\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m54s\u001b[0m 330ms/step - accuracy: 0.6443 - loss: 0.9582 - val_accuracy: 0.8189 - val_loss: 0.6063 - learning_rate: 1.0000e-04\n",
      "Epoch 5/10\n",
      "\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m54s\u001b[0m 329ms/step - accuracy: 0.7424 - loss: 0.8609 - val_accuracy: 0.8173 - val_loss: 0.5394 - learning_rate: 1.0000e-04\n",
      "Epoch 6/10\n",
      "\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m53s\u001b[0m 327ms/step - accuracy: 0.8034 - loss: 0.7219 - val_accuracy: 0.8205 - val_loss: 0.4854 - learning_rate: 1.0000e-04\n",
      "Epoch 7/10\n",
      "\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m53s\u001b[0m 325ms/step - accuracy: 0.7975 - loss: 0.7005 - val_accuracy: 0.8077 - val_loss: 0.4874 - learning_rate: 1.0000e-04\n",
      "Epoch 8/10\n",
      "\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m53s\u001b[0m 327ms/step - accuracy: 0.8107 - loss: 0.6291 - val_accuracy: 0.8093 - val_loss: 0.4752 - learning_rate: 1.0000e-04\n",
      "Epoch 9/10\n",
      "\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m53s\u001b[0m 325ms/step - accuracy: 0.8358 - loss: 0.5775 - val_accuracy: 0.8413 - val_loss: 0.4275 - learning_rate: 1.0000e-04\n",
      "Epoch 10/10\n",
      "\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m53s\u001b[0m 323ms/step - accuracy: 0.8474 - loss: 0.5808 - val_accuracy: 0.8301 - val_loss: 0.4087 - learning_rate: 1.0000e-04\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(train_generator, epochs = 10, callbacks=callbacks,validation_data = test_generator, class_weight = {0:3 , 1:1})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d661931",
   "metadata": {
    "execution": {
     "iopub.status.busy": "2025-07-24T16:05:36.212255Z",
     "iopub.status.idle": "2025-07-24T16:05:36.212608Z",
     "shell.execute_reply": "2025-07-24T16:05:36.212451Z",
     "shell.execute_reply.started": "2025-07-24T16:05:36.212437Z"
    },
    "papermill": {
     "duration": 0.071205,
     "end_time": "2025-07-24T17:10:22.165720",
     "exception": false,
     "start_time": "2025-07-24T17:10:22.094515",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "history = model.fit(x = X_train, y=y_train, epochs = 10, \n",
    "                    validation_data = (X_test,y_test), batch_size = 64, callbacks=callbacks, class_weight = {0:3 , 1:1}) #\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2868c836",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:10:22.305666Z",
     "iopub.status.busy": "2025-07-24T17:10:22.305148Z",
     "iopub.status.idle": "2025-07-24T17:10:22.525241Z",
     "shell.execute_reply": "2025-07-24T17:10:22.524498Z"
    },
    "papermill": {
     "duration": 0.291391,
     "end_time": "2025-07-24T17:10:22.526583",
     "exception": false,
     "start_time": "2025-07-24T17:10:22.235192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cdcfb5f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:10:22.678009Z",
     "iopub.status.busy": "2025-07-24T17:10:22.677759Z",
     "iopub.status.idle": "2025-07-24T17:10:22.822197Z",
     "shell.execute_reply": "2025-07-24T17:10:22.821446Z"
    },
    "papermill": {
     "duration": 0.217925,
     "end_time": "2025-07-24T17:10:22.823297",
     "exception": false,
     "start_time": "2025-07-24T17:10:22.605372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1d6f55b",
   "metadata": {
    "papermill": {
     "duration": 0.070833,
     "end_time": "2025-07-24T17:10:22.966137",
     "exception": false,
     "start_time": "2025-07-24T17:10:22.895304",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Predict on test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bdd518e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:10:23.108512Z",
     "iopub.status.busy": "2025-07-24T17:10:23.108272Z",
     "iopub.status.idle": "2025-07-24T17:10:23.437856Z",
     "shell.execute_reply": "2025-07-24T17:10:23.437234Z"
    },
    "papermill": {
     "duration": 0.401576,
     "end_time": "2025-07-24T17:10:23.438908",
     "exception": false,
     "start_time": "2025-07-24T17:10:23.037332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 128ms/step - accuracy: 0.6250 - loss: 0.6397\n",
      "test loss, test acc: [0.6397378444671631, 0.625]\n"
     ]
    }
   ],
   "source": [
    "results = model.evaluate(valid_generator)\n",
    "print(\"test loss, test acc:\", results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "60925a50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T17:10:23.591365Z",
     "iopub.status.busy": "2025-07-24T17:10:23.591068Z",
     "iopub.status.idle": "2025-07-24T17:10:24.089805Z",
     "shell.execute_reply": "2025-07-24T17:10:24.089228Z"
    },
    "papermill": {
     "duration": 0.5753,
     "end_time": "2025-07-24T17:10:24.090809",
     "exception": false,
     "start_time": "2025-07-24T17:10:23.515509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 376ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.8269324 ],\n",
       "       [0.9055393 ],\n",
       "       [0.58137953],\n",
       "       [0.2557524 ],\n",
       "       [0.9502422 ],\n",
       "       [0.8282103 ],\n",
       "       [0.8045089 ],\n",
       "       [0.8857556 ],\n",
       "       [0.83551466],\n",
       "       [0.7908049 ],\n",
       "       [0.237902  ],\n",
       "       [0.9055658 ],\n",
       "       [0.5979854 ],\n",
       "       [0.8443878 ],\n",
       "       [0.62418926],\n",
       "       [0.71663755]], dtype=float32)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict(valid_generator)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 17810,
     "sourceId": 23812,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 594.478854,
   "end_time": "2025-07-24T17:10:27.163597",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-24T17:00:32.684743",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
