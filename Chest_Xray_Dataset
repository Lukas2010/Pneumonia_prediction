{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":23812,"sourceType":"datasetVersion","datasetId":17810}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install -q -U tensorflow==2.19.0","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:23.610400Z","iopub.execute_input":"2025-07-23T05:47:23.611113Z","iopub.status.idle":"2025-07-23T05:47:27.233457Z","shell.execute_reply.started":"2025-07-23T05:47:23.611089Z","shell.execute_reply":"2025-07-23T05:47:27.232533Z"}},"outputs":[],"execution_count":93},{"cell_type":"code","source":"import numpy as np\nimport os\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport keras\nfrom keras import layers, ops\n\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:27.235090Z","iopub.execute_input":"2025-07-23T05:47:27.235332Z","iopub.status.idle":"2025-07-23T05:47:27.241770Z","shell.execute_reply.started":"2025-07-23T05:47:27.235310Z","shell.execute_reply":"2025-07-23T05:47:27.241131Z"}},"outputs":[{"name":"stdout","text":"Number of replicas: 1\n","output_type":"stream"}],"execution_count":94},{"cell_type":"markdown","source":"# Locate and import the data","metadata":{}},{"cell_type":"code","source":"print(\"The working directory is: \", os.getcwd())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:27.242370Z","iopub.execute_input":"2025-07-23T05:47:27.242596Z","iopub.status.idle":"2025-07-23T05:47:27.258066Z","shell.execute_reply.started":"2025-07-23T05:47:27.242563Z","shell.execute_reply":"2025-07-23T05:47:27.257531Z"}},"outputs":[{"name":"stdout","text":"The working directory is:  /kaggle/working\n","output_type":"stream"}],"execution_count":95},{"cell_type":"markdown","source":"**The files are located in the following directory**","metadata":{}},{"cell_type":"code","source":"data_dir = \"/kaggle/input/chest-xray-pneumonia/chest_xray\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:27.259452Z","iopub.execute_input":"2025-07-23T05:47:27.259680Z","iopub.status.idle":"2025-07-23T05:47:27.274848Z","shell.execute_reply.started":"2025-07-23T05:47:27.259665Z","shell.execute_reply":"2025-07-23T05:47:27.274151Z"}},"outputs":[],"execution_count":96},{"cell_type":"code","source":"os.listdir(data_dir)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:27.275437Z","iopub.execute_input":"2025-07-23T05:47:27.275649Z","iopub.status.idle":"2025-07-23T05:47:27.303025Z","shell.execute_reply.started":"2025-07-23T05:47:27.275634Z","shell.execute_reply":"2025-07-23T05:47:27.302489Z"}},"outputs":[{"execution_count":97,"output_type":"execute_result","data":{"text/plain":"['chest_xray', '__MACOSX', 'val', 'test', 'train']"},"metadata":{}}],"execution_count":97},{"cell_type":"code","source":"train,test, val = int(), int(), int()\ndata = {\"train\":train,\n        \"test\":test,\n        \"val\": val\n    \n}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:27.303749Z","iopub.execute_input":"2025-07-23T05:47:27.303937Z","iopub.status.idle":"2025-07-23T05:47:27.311213Z","shell.execute_reply.started":"2025-07-23T05:47:27.303922Z","shell.execute_reply":"2025-07-23T05:47:27.310486Z"}},"outputs":[],"execution_count":98},{"cell_type":"code","source":"batch_size = 32\nfor ttv in data.keys():\n    directory = data_dir + \"/\" + ttv\n    extracted = keras.utils.image_dataset_from_directory(directory = data_dir + \"/\" + ttv, \n                                                labels=\"inferred\",\n                                                label_mode=\"binary\",\n                                                class_names=[\"NORMAL\", \"PNEUMONIA\"],\n                                                color_mode=\"grayscale\",\n                                                image_size=(150, 150),\n                                                batch_size = batch_size)\n    data.update({ttv:extracted})\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:27.312207Z","iopub.execute_input":"2025-07-23T05:47:27.312488Z","iopub.status.idle":"2025-07-23T05:47:29.785648Z","shell.execute_reply.started":"2025-07-23T05:47:27.312472Z","shell.execute_reply":"2025-07-23T05:47:29.784849Z"}},"outputs":[{"name":"stdout","text":"Found 5216 files belonging to 2 classes.\nFound 624 files belonging to 2 classes.\nFound 16 files belonging to 2 classes.\n","output_type":"stream"}],"execution_count":99},{"cell_type":"code","source":"print(\"Unbatching the files\")\ntrain = data.get(\"train\").unbatch()\ntest = data.get(\"test\").unbatch()\nval = data.get(\"val\").unbatch()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:29.786381Z","iopub.execute_input":"2025-07-23T05:47:29.786607Z","iopub.status.idle":"2025-07-23T05:47:29.814977Z","shell.execute_reply.started":"2025-07-23T05:47:29.786566Z","shell.execute_reply":"2025-07-23T05:47:29.814388Z"}},"outputs":[{"name":"stdout","text":"Unbatching the files\n","output_type":"stream"}],"execution_count":100},{"cell_type":"code","source":"for i in enumerate(train.take(3)):\n    arry = i[1][0].numpy()\n    print(\"Min: \", np.min(arry))\n    print(\"Max: \", np.max(arry))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:29.815720Z","iopub.execute_input":"2025-07-23T05:47:29.815981Z","iopub.status.idle":"2025-07-23T05:47:29.927037Z","shell.execute_reply.started":"2025-07-23T05:47:29.815954Z","shell.execute_reply":"2025-07-23T05:47:29.926281Z"}},"outputs":[{"name":"stdout","text":"Min:  0.0\nMax:  254.55666\nMin:  0.0\nMax:  255.0\nMin:  34.735413\nMax:  213.72586\n","output_type":"stream"}],"execution_count":101},{"cell_type":"markdown","source":"The pixels of the images seem to be in a spectrum between 0 and 255. Therefore we will apply uniformisation. ","metadata":{}},{"cell_type":"code","source":"print(\"Creating uniform train, test and validation pairs\")\nX_train = np.asarray(list(train.map(lambda x,y: (x / 127.5) - 1)))\ny_train = np.asarray(list(train.map(lambda x,y: y)))\n\nX_test = np.asarray(list(test.map(lambda x,y: (x / 127.5) - 1)))\ny_test = np.asarray(list(test.map(lambda x,y: y)))\n\nX_val = np.asarray(list(val.map(lambda x,y: (x / 127.5) - 1)))\ny_val = np.asarray(list(val.map(lambda x,y: y)))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:29.929732Z","iopub.execute_input":"2025-07-23T05:47:29.929951Z","iopub.status.idle":"2025-07-23T05:47:51.473050Z","shell.execute_reply.started":"2025-07-23T05:47:29.929934Z","shell.execute_reply":"2025-07-23T05:47:51.470261Z"}},"outputs":[{"name":"stdout","text":"Creating uniform train, test and validation pairs\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/404435938.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Creating uniform train, test and validation pairs\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mX_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m127.5\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mX_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m127.5\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    824\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__next__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    825\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 826\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    827\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOutOfRangeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    828\u001b[0m       \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m_next_internal\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    774\u001b[0m     \u001b[0;31m# to communicate that there is no more data to iterate over.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    775\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecution_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSYNC\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 776\u001b[0;31m       ret = gen_dataset_ops.iterator_get_next(\n\u001b[0m\u001b[1;32m    777\u001b[0m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterator_resource\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    778\u001b[0m           \u001b[0moutput_types\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flat_output_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/ops/gen_dataset_ops.py\u001b[0m in \u001b[0;36miterator_get_next\u001b[0;34m(iterator, output_types, output_shapes, name)\u001b[0m\n\u001b[1;32m   3079\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mtld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_eager\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3080\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3081\u001b[0;31m       _result = pywrap_tfe.TFE_Py_FastPathExecute(\n\u001b[0m\u001b[1;32m   3082\u001b[0m         \u001b[0m_ctx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"IteratorGetNext\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"output_types\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3083\u001b[0m         \"output_shapes\", output_shapes)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}],"execution_count":102},{"cell_type":"code","source":"print(len(y_train))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.473644Z","iopub.status.idle":"2025-07-23T05:47:51.475604Z","shell.execute_reply.started":"2025-07-23T05:47:51.475379Z","shell.execute_reply":"2025-07-23T05:47:51.475396Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#arry = np.select(y_train==0, y_train)\n#print(len(np.where(y_train >0)))\nprint(\"Number of pictures with pneumonia: \", len(np.where(y_train >0)[1]))\nprint(\"Number of pictures without pneumonia: \",len(np.where(y_train == 0)[1]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.478005Z","iopub.status.idle":"2025-07-23T05:47:51.478774Z","shell.execute_reply.started":"2025-07-23T05:47:51.478604Z","shell.execute_reply":"2025-07-23T05:47:51.478621Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Lets have a look at the first entry in our training data: \", X_train[1])\n\nprint(\"\")\n\nprint(\"The minimum value in the data is: \", np.min(X_train), \"and the maximum value is: \",  np.max(X_train))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.479205Z","iopub.status.idle":"2025-07-23T05:47:51.480136Z","shell.execute_reply.started":"2025-07-23T05:47:51.479796Z","shell.execute_reply":"2025-07-23T05:47:51.479813Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Data visualisation\n\n","metadata":{}},{"cell_type":"code","source":"plt.imshow(X_train[0],cmap = \"gray\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.480779Z","iopub.status.idle":"2025-07-23T05:47:51.481052Z","shell.execute_reply.started":"2025-07-23T05:47:51.480913Z","shell.execute_reply":"2025-07-23T05:47:51.480925Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"_, ax = plt.subplots(2, 2, figsize=(16, 16))\n\nfor i in range(0,2):\n    ax[i,0].imshow(X_train[i+2],cmap = \"gray\")\n    ax[i, 0].set_title(np.where(y_train[i+2] == 0, \"Normal\", \"Pneumonia\")) #\n    ax[i, 0].axis(\"off\")\n    \n    ax[i,1].imshow(X_train[i+1],cmap = \"gray\")\n    ax[i, 1].set_title(np.where(y_train[i+1] == 0, \"Normal\", \"Pneumonia\"))\n    ax[i, 1].axis(\"off\")\n\n    \n    \n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.481473Z","iopub.status.idle":"2025-07-23T05:47:51.481751Z","shell.execute_reply.started":"2025-07-23T05:47:51.481614Z","shell.execute_reply":"2025-07-23T05:47:51.481626Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Data augmentation","metadata":{}},{"cell_type":"markdown","source":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n        rotation_range = 45, \n        zoom_range = 0.1, \n        width_shift_range=0.2, \n        height_shift_range=0.2,  \n        horizontal_flip = True,  \n        vertical_flip=False)  \n\n\n#datagen.fit(X_train)","metadata":{"execution":{"iopub.status.busy":"2025-07-21T20:08:57.251852Z","iopub.execute_input":"2025-07-21T20:08:57.252089Z","iopub.status.idle":"2025-07-21T20:08:57.481288Z","shell.execute_reply.started":"2025-07-21T20:08:57.252072Z","shell.execute_reply":"2025-07-21T20:08:57.480714Z"}}},{"cell_type":"code","source":"print(type(X_train))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.482130Z","iopub.status.idle":"2025-07-23T05:47:51.482381Z","shell.execute_reply.started":"2025-07-23T05:47:51.482241Z","shell.execute_reply":"2025-07-23T05:47:51.482252Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"i = 0\nfor img in X_train:\n    if i%5 == 0:\n        img = np.rot90(img)\n    elif i%7 == 0:\n        img = np.flipud(img)\n    X_train[i] = img\n    i+=1\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.483531Z","iopub.status.idle":"2025-07-23T05:47:51.485063Z","shell.execute_reply.started":"2025-07-23T05:47:51.484899Z","shell.execute_reply":"2025-07-23T05:47:51.484915Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.imshow(X_train[4],cmap = \"gray\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.485504Z","iopub.status.idle":"2025-07-23T05:47:51.485799Z","shell.execute_reply.started":"2025-07-23T05:47:51.485636Z","shell.execute_reply":"2025-07-23T05:47:51.485647Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Model","metadata":{}},{"cell_type":"code","source":"from keras.models import Sequential\nfrom keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout , BatchNormalization,AveragePooling2D\nmodel = Sequential()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.486175Z","iopub.status.idle":"2025-07-23T05:47:51.486424Z","shell.execute_reply.started":"2025-07-23T05:47:51.486297Z","shell.execute_reply":"2025-07-23T05:47:51.486308Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = Sequential()\nmodel.add(Conv2D(filters = 1024, kernel_size=3,strides = 2, padding = \"valid\", activation = \"relu\", \n                 input_shape= (150,150,1)))\nmodel.add(BatchNormalization())\n#model.add(MaxPool2D(pool_size = 2 , strides = 2 , padding = 'same'))\nmodel.add(AveragePooling2D(pool_size = 2 , strides = 2 , padding = 'same'))\n#model.add(layers.LeakyReLU())\nmodel.add(Conv2D(filters = 512, kernel_size=3,strides = 2, padding = \"valid\", activation = \"relu\"))\nmodel.add(BatchNormalization())\n#model.add(MaxPool2D(pool_size = 2 , strides = 2 , padding = 'same'))\nmodel.add(AveragePooling2D(pool_size = 2 , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(filters = 256, kernel_size=3,strides = 2, padding = \"same\", activation = \"relu\"))\nmodel.add(BatchNormalization())\n#model.add(MaxPool2D(pool_size = 2 , strides = 2 , padding = 'same'))\nmodel.add(AveragePooling2D(pool_size = 2 , strides = 2 , padding = 'same'))\n#model.add(layers.LeakyReLU())\nmodel.add(Conv2D(filters = 128, kernel_size=3,strides = 2, padding = \"same\", activation = \"relu\"))\nmodel.add(BatchNormalization())\n#model.add(MaxPool2D(pool_size = 2 , strides = 2 , padding = 'same'))\nmodel.add(AveragePooling2D(pool_size = 2 , strides = 2 , padding = 'same'))\n#model.add(layers.LeakyReLU())\nmodel.add(Conv2D(filters = 64, kernel_size=3,strides = 2, padding = \"same\", activation = \"relu\"))\nmodel.add(BatchNormalization())\n#model.add(MaxPool2D(pool_size = 2 , strides = 2 , padding = 'same'))\nmodel.add(AveragePooling2D(pool_size = 2 , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(filters = 32, kernel_size=3,strides = 2, padding = \"same\", activation = \"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(AveragePooling2D(pool_size = 2 , strides = 2 , padding = 'same'))\n#model.add(MaxPool2D(pool_size = 2 , strides = 2 , padding = 'same'))\nmodel.add(Flatten())\nmodel.add(Dense(units = 128 , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units = 1 , activation = 'sigmoid'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.486831Z","iopub.status.idle":"2025-07-23T05:47:51.487071Z","shell.execute_reply.started":"2025-07-23T05:47:51.486945Z","shell.execute_reply":"2025-07-23T05:47:51.486956Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(model.summary())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.487440Z","iopub.status.idle":"2025-07-23T05:47:51.487831Z","shell.execute_reply.started":"2025-07-23T05:47:51.487550Z","shell.execute_reply":"2025-07-23T05:47:51.487560Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Customise the Adam optimizer","metadata":{}},{"cell_type":"code","source":"from keras.optimizers import Adam\n\noptimizer = Adam(\n    learning_rate = 0.001,\n    use_ema = True,\n    ema_momentum=0.99\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.489845Z","iopub.status.idle":"2025-07-23T05:47:51.490098Z","shell.execute_reply.started":"2025-07-23T05:47:51.489967Z","shell.execute_reply":"2025-07-23T05:47:51.489978Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Create a learning rate scheduler","metadata":{}},{"cell_type":"code","source":"from keras.callbacks import LearningRateScheduler\n\ndef scheduler(epoch, lr):\n    if epoch < 10:\n        return lr\n    else:\n        print(round(model.optimizer.learning_rate, 5))\n        return float(lr * ops.exp(-0.1))\n        \n\ncallback = keras.callbacks.LearningRateScheduler(scheduler)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.491123Z","iopub.status.idle":"2025-07-23T05:47:51.491405Z","shell.execute_reply.started":"2025-07-23T05:47:51.491269Z","shell.execute_reply":"2025-07-23T05:47:51.491280Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.compile(optimizer = optimizer , loss = 'binary_crossentropy' , metrics = ['accuracy'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.492433Z","iopub.status.idle":"2025-07-23T05:47:51.492767Z","shell.execute_reply.started":"2025-07-23T05:47:51.492595Z","shell.execute_reply":"2025-07-23T05:47:51.492609Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"history = model.fit(x = X_train, y = y_train, epochs = 40, batch_size = 32, validation_data = (X_val,y_val),callbacks=[callback], class_weight = {0:3 , 1:1})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.493825Z","iopub.status.idle":"2025-07-23T05:47:51.494104Z","shell.execute_reply.started":"2025-07-23T05:47:51.493964Z","shell.execute_reply":"2025-07-23T05:47:51.493976Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.495082Z","iopub.status.idle":"2025-07-23T05:47:51.495361Z","shell.execute_reply.started":"2025-07-23T05:47:51.495217Z","shell.execute_reply":"2025-07-23T05:47:51.495228Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.495750Z","iopub.status.idle":"2025-07-23T05:47:51.496118Z","shell.execute_reply.started":"2025-07-23T05:47:51.495874Z","shell.execute_reply":"2025-07-23T05:47:51.495885Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Predict on test data","metadata":{}},{"cell_type":"code","source":"results = model.evaluate(X_test, y_test)\nprint(\"test loss, test acc:\", results)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-23T05:47:51.497286Z","iopub.status.idle":"2025-07-23T05:47:51.497571Z","shell.execute_reply.started":"2025-07-23T05:47:51.497419Z","shell.execute_reply":"2025-07-23T05:47:51.497431Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.predict(X_test)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}