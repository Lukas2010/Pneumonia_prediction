{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a024afea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-20T20:13:12.779698Z",
     "iopub.status.busy": "2025-07-20T20:13:12.778572Z",
     "iopub.status.idle": "2025-07-20T20:14:51.361029Z",
     "shell.execute_reply": "2025-07-20T20:14:51.357629Z"
    },
    "papermill": {
     "duration": 98.592269,
     "end_time": "2025-07-20T20:14:51.364925",
     "exception": false,
     "start_time": "2025-07-20T20:13:12.772656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m644.9/644.9 MB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m55.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.5/5.5 MB\u001b[0m \u001b[31m82.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "dopamine-rl 4.1.2 requires gymnasium>=1.0.0, but you have gymnasium 0.29.0 which is incompatible.\r\n",
      "tf-keras 2.18.0 requires tensorflow<2.19,>=2.18, but you have tensorflow 2.19.0 which is incompatible.\r\n",
      "tensorflow-decision-forests 1.11.0 requires tensorflow==2.18.0, but you have tensorflow 2.19.0 which is incompatible.\r\n",
      "tensorflow-text 2.18.1 requires tensorflow<2.19,>=2.18.0, but you have tensorflow 2.19.0 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "!pip install -q -U tensorflow==2.19.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2f8b75d2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-20T20:14:51.409183Z",
     "iopub.status.busy": "2025-07-20T20:14:51.408467Z",
     "iopub.status.idle": "2025-07-20T20:15:11.663862Z",
     "shell.execute_reply": "2025-07-20T20:15:11.662509Z"
    },
    "papermill": {
     "duration": 20.279498,
     "end_time": "2025-07-20T20:15:11.667599",
     "exception": false,
     "start_time": "2025-07-20T20:14:51.388101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-20 20:14:55.915130: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:467] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753042495.976610      13 cuda_dnn.cc:8579] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753042495.999400      13 cuda_blas.cc:1407] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "W0000 00:00:1753042496.053601      13 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\n",
      "W0000 00:00:1753042496.053688      13 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\n",
      "W0000 00:00:1753042496.053694      13 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\n",
      "W0000 00:00:1753042496.053699      13 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of replicas: 1\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "from keras import layers, ops\n",
    "\n",
    "try:\n",
    "    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n",
    "    print('Device:', tpu.master())\n",
    "    tf.config.experimental_connect_to_cluster(tpu)\n",
    "    tf.tpu.experimental.initialize_tpu_system(tpu)\n",
    "    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n",
    "except:\n",
    "    strategy = tf.distribute.get_strategy()\n",
    "print('Number of replicas:', strategy.num_replicas_in_sync)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "464e283c",
   "metadata": {
    "papermill": {
     "duration": 0.019577,
     "end_time": "2025-07-20T20:15:11.711898",
     "exception": false,
     "start_time": "2025-07-20T20:15:11.692321",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Locate and import the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "612d61bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-20T20:15:11.744881Z",
     "iopub.status.busy": "2025-07-20T20:15:11.744125Z",
     "iopub.status.idle": "2025-07-20T20:15:11.750865Z",
     "shell.execute_reply": "2025-07-20T20:15:11.749475Z"
    },
    "papermill": {
     "duration": 0.024644,
     "end_time": "2025-07-20T20:15:11.752946",
     "exception": false,
     "start_time": "2025-07-20T20:15:11.728302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The working directory is:  /kaggle/working\n"
     ]
    }
   ],
   "source": [
    "print(\"The working directory is: \", os.getcwd())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f43beea",
   "metadata": {
    "papermill": {
     "duration": 0.01552,
     "end_time": "2025-07-20T20:15:11.783399",
     "exception": false,
     "start_time": "2025-07-20T20:15:11.767879",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**The files are located in the following directory**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "49b89b58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-20T20:15:11.815549Z",
     "iopub.status.busy": "2025-07-20T20:15:11.815116Z",
     "iopub.status.idle": "2025-07-20T20:15:11.821235Z",
     "shell.execute_reply": "2025-07-20T20:15:11.820003Z"
    },
    "papermill": {
     "duration": 0.02457,
     "end_time": "2025-07-20T20:15:11.823476",
     "exception": false,
     "start_time": "2025-07-20T20:15:11.798906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_dir = \"/kaggle/input/chest-xray-pneumonia/chest_xray\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f4c459a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-20T20:15:11.855343Z",
     "iopub.status.busy": "2025-07-20T20:15:11.854879Z",
     "iopub.status.idle": "2025-07-20T20:15:11.875653Z",
     "shell.execute_reply": "2025-07-20T20:15:11.874501Z"
    },
    "papermill": {
     "duration": 0.039384,
     "end_time": "2025-07-20T20:15:11.877595",
     "exception": false,
     "start_time": "2025-07-20T20:15:11.838211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['chest_xray', '__MACOSX', 'val', 'test', 'train']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(data_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "341ad991",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-20T19:52:20.034361Z",
     "iopub.status.busy": "2025-07-20T19:52:20.034039Z",
     "iopub.status.idle": "2025-07-20T19:52:20.038824Z",
     "shell.execute_reply": "2025-07-20T19:52:20.037938Z",
     "shell.execute_reply.started": "2025-07-20T19:52:20.034341Z"
    },
    "papermill": {
     "duration": 0.017367,
     "end_time": "2025-07-20T20:15:11.910469",
     "exception": false,
     "start_time": "2025-07-20T20:15:11.893102",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "test = int()\n",
    "train = int()\n",
    "val = int()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49405895",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-20T19:53:12.151249Z",
     "iopub.status.busy": "2025-07-20T19:53:12.150501Z",
     "iopub.status.idle": "2025-07-20T19:53:14.775964Z",
     "shell.execute_reply": "2025-07-20T19:53:14.775120Z",
     "shell.execute_reply.started": "2025-07-20T19:53:12.151222Z"
    },
    "papermill": {
     "duration": 0.014251,
     "end_time": "2025-07-20T20:15:11.939716",
     "exception": false,
     "start_time": "2025-07-20T20:15:11.925465",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "for step in [test, train, val]:\n",
    "    directory = step[0]\n",
    "    print(step)\n",
    "    \n",
    "    step = keras.utils.image_dataset_from_directory(directory = directory, \n",
    "                                                    labels=\"inferred\",\n",
    "                                                    label_mode=\"binary\",\n",
    "                                                    class_names=[\"NORMAL\", \"PNEUMONIA\"],\n",
    "                                                    color_mode=\"grayscale\",\n",
    "                                                    image_size=(150, 150))\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6610fb5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-20T20:15:11.973553Z",
     "iopub.status.busy": "2025-07-20T20:15:11.972941Z",
     "iopub.status.idle": "2025-07-20T20:15:18.553120Z",
     "shell.execute_reply": "2025-07-20T20:15:18.551286Z"
    },
    "papermill": {
     "duration": 6.598618,
     "end_time": "2025-07-20T20:15:18.555550",
     "exception": false,
     "start_time": "2025-07-20T20:15:11.956932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 5216 files belonging to 2 classes.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-20 20:15:17.765802: E external/local_xla/xla/stream_executor/cuda/cuda_platform.cc:51] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 624 files belonging to 2 classes.\n",
      "Found 16 files belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "batch_size = 32\n",
    "\n",
    "train = keras.utils.image_dataset_from_directory(directory = data_dir + \"/\" + \"train\", \n",
    "                                                labels=\"inferred\",\n",
    "                                                label_mode=\"binary\",\n",
    "                                                class_names=[\"NORMAL\", \"PNEUMONIA\"],\n",
    "                                                color_mode=\"grayscale\",\n",
    "                                                image_size=(150, 150),\n",
    "                                                batch_size = batch_size)\n",
    "\n",
    "test = keras.utils.image_dataset_from_directory(directory = data_dir + \"/\" + \"test\", \n",
    "                                                labels=\"inferred\",\n",
    "                                                label_mode=\"binary\",\n",
    "                                                class_names=[\"NORMAL\", \"PNEUMONIA\"],\n",
    "                                                color_mode=\"grayscale\",\n",
    "                                                image_size=(150, 150),\n",
    "                                               batch_size = batch_size)\n",
    "\n",
    "val = keras.utils.image_dataset_from_directory(directory = data_dir + \"/\" + \"val\", \n",
    "                                                labels=\"inferred\",\n",
    "                                                label_mode=\"binary\",\n",
    "                                                class_names=[\"NORMAL\", \"PNEUMONIA\"],\n",
    "                                                color_mode=\"grayscale\",\n",
    "                                                image_size=(150, 150),\n",
    "                                                batch_size = batch_size)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9c7c7fc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-20T20:15:18.588125Z",
     "iopub.status.busy": "2025-07-20T20:15:18.587687Z",
     "iopub.status.idle": "2025-07-20T20:15:18.596855Z",
     "shell.execute_reply": "2025-07-20T20:15:18.595455Z"
    },
    "papermill": {
     "duration": 0.02788,
     "end_time": "2025-07-20T20:15:18.599285",
     "exception": false,
     "start_time": "2025-07-20T20:15:18.571405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train data size:  5216\n",
      "Test data size:  640\n",
      "Val data size:  32\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(\"Train data size: \", train.cardinality().numpy() * batch_size)\n",
    "print(\"Test data size: \", test.cardinality().numpy() * batch_size)\n",
    "print(\"Val data size: \", val.cardinality().numpy() * batch_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b43801ed",
   "metadata": {
    "papermill": {
     "duration": 0.017389,
     "end_time": "2025-07-20T20:15:18.634095",
     "exception": false,
     "start_time": "2025-07-20T20:15:18.616706",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# To-DO\n",
    "1. Deal with the unbalanced batch sizes"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 17810,
     "sourceId": 23812,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 137.29928,
   "end_time": "2025-07-20T20:15:21.718314",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-20T20:13:04.419034",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
